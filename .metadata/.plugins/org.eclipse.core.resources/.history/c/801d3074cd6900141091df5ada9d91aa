package week07

object session5 {
  val problem = new Pouring(Vector(4,9))          //> problem  : week07.Pouring = week07.Pouring@37da1845
  problem.moves                                   //> res0: scala.collection.immutable.IndexedSeq[Product with Serializable with we
                                                  //| ek07.session5.problem.Move] = Vector(Empty(0), Empty(1), Fill(0), Fill(1), Po
                                                  //| ur(0,1), Pour(1,0))
  
  problem.pathSets.take(3).toList                 //> res1: List[Set[week07.session5.problem.Path]] = List(Set(--> Vector(0, 0)), 
                                                  //| Set(Fill(0)--> Vector(4, 0), Empty(1)--> Vector(0, 0), Fill(1)--> Vector(0, 
                                                  //| 7), Pour(0,1)--> Vector(0, 0), Pour(1,0)--> Vector(0, 0), Empty(0)--> Vector
                                                  //| (0, 0)), Set(Pour(1,0) Fill(1)--> Vector(0, 7), Fill(0) Empty(0)--> Vector(0
                                                  //| , 0), Pour(1,0) Pour(1,0)--> Vector(0, 0), Pour(1,0) Pour(0,1)--> Vector(0, 
                                                  //| 0), Fill(1) Pour(1,0)--> Vector(4, 3), Fill(1) Fill(0)--> Vector(4, 7), Empt
                                                  //| y(0) Pour(0,1)--> Vector(0, 0), Pour(1,0) Fill(0)--> Vector(4, 0), Pour(1,0)
                                                  //|  Empty(1)--> Vector(0, 0), Pour(0,1) Empty(0)--> Vector(0, 0), Empty(1) Pour
                                                  //| (0,1)--> Vector(0, 0), Fill(1) Fill(1)--> Vector(0, 7), Fill(1) Empty(0)--> 
                                                  //| Vector(0, 7), Empty(1) Empty(0)--> Vector(0, 0), Fill(1) Empty(1)--> Vector(
                                                  //| 0, 0), Pour(0,1) Pour(0,1)--> Vector(0, 0), Empty(1) Pour(1,0)--> Vector(0, 
                                                  //| 0), Empty(0) Empty(1)--> Vector(0, 0), Empty(1) Fill(1)--> Vector(0, 7), Emp
                                                  //| ty(1) Empty(1)--> Vector
                                                  //| Output exceeds cutoff limit.
	problem.solution(6)                       //> res2: Stream[week07.session5.problem.Path] = Stream(Fill(1) Pour(1,0) Empty(
                                                  //| 0) Pour(1,0) Fill(1) Pour(1,0)--> Vector(4, 6), ?)
}