package week07

object session1 {

  def isPrime(x: Int): Boolean = true

  ((1000 to 10000) filter isPrime)(1)

  def secondPrime(from: Int, to: Int) = nthPrime(from, to, 2)
  def nthPrime(from: Int, to: Int, n: Int): Int =
    if (from >= to) throw new Error("no prime")
    else if (isPrime(from))
      if (n == 1) from else nthPrime(from + 1, to, n - 1)
    else nthPrime(from + 1, to, n)

  val xs = Stream.cons(1, Stream.cons(2, Stream.empty))
  Stream(1, 2, 3)

  (1 to 1000).toStream

  def streamRange(lo: Int, hi: Int): Stream[Int] =
    if (lo >= hi) Stream.empty
    else Stream.cons(lo, streamRange(lo + 1, hi))

  def listRange(lo: Int, hi: Int): List[Int] =
    if (lo >= hi) Nil
    else lo :: listRange(lo + 1, hi)
}